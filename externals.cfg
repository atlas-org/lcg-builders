### externals ###
[group externals]
packages = boost, clhep, gccxml, gdb, libxml2, python, root, sqlite, tbb, xerces-c, xrootd

# artificially require any environment variables defined by package or
# groups of packages.
environment = group:buildtools, group:toolchaingcc

build_cmd_options = -j{NCPUS}

[package boost]
version = {boost_version}
features = tarball prepare makemake
depends = prepare:python_install
source_archive_file = {source_unpacked}.tar.gz
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
source_archive_checksum = md5:47ce53193922bd5579982edf067afd30
unpacked_target = bootstrap.sh
prepare_cmd = cp -a ../../{source_dir}/{source_unpacked}/* .
prepare_target = bootstrap.sh
build_cmd = ./bootstrap.sh
build_cmd_options = --prefix={install_dir} --without-icu --without-libraries=mpi --with-python={python_install_dir}/bin/python --with-python-root={python_install_dir}
build_target = b2
install_cmd = ./b2 
install_cmd_options = install cxxflags="-std=c++11 -Wno-deprecated-declarations -fvisibility-inlines-hidden" variant=release
install_target = include/boost/any.hpp

# install under Boost instead of boost, for compat with LCG layout
install_dir = {INSTALL_AREA}/Boost/{version}_python{python_version2digit}/{HWAF_VARIANT}

[package clhep]
version = {clhep_version}
features = tarball cmake makemake
depends = prepare:cmake_install
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
source_archive_checksum = md5:2e38b75c87394c8dde5521a10e0dcd17
prepare_cmd_options = -DCLHEP_BUILD_DOCS=OFF
unpacked_target = README
build_target = CLHEP
install_target = bin/clhep-config

[package gccxml]
version = {gccxml_version}
features = tarball cmake makemake
depends = prepare:cmake_install
source_url = http://cern.ch/mana-fwk/downloads/ext/gccxml-{version}.tar.gz
source_archive_checksum = md5:f6221b9ffa6084e47450356f2f2059b0
unpacked_target = CMakeLists.txt
build_target = bin/gccxml
install_target = bin/gccxml

[package gdb]
version = {gdb_version}
source_url = http://ftp.gnu.org/gnu/gdb/{source_archive_file}
source_archive_checksum = md5:d42841167fd061d90fddf9a7212a1f9f
prepare_cmd_options = --prefix={install_dir} --libdir={install_dir}/lib --enable-werror=no --enable-build-warnings=no --enable-ld=yes
build_target = gdb
install_target = bin/gdb

[package libxml2]
depends = prepare:python_install
version = {libxml2_version}
source_url = ftp://xmlsoft.org/{package}/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --with-threads --with-history --with-python={python_install_dir}/bin/python
build_target = libxml2.la
install_target = lib/libxml2.a

[package python]
depends = prepare:sqlite_install
version = {python_version}
source_unpacked = Python-{version}
source_archive_file = {source_unpacked}.tgz
source_url = http://www.python.org/ftp/{package}/{version}/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --enable-shared --with-threads --enable-unicode=ucs4
build_target = python
install_target = bin/python
# install under Python instead of python, for compat with LCG layout
install_dir = {INSTALL_AREA}/Python/{version}/{HWAF_VARIANT}

export_PATH = prepend:{install_dir}/bin
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib

[package root]
version = {root_version}
depends = prepare:xrootd_install, prepare:python_install, prepare:gccxml_install
source_url = ftp://root.cern.ch/{package}/{source_archive_file}
source_archive_file = {package}_v{version}.source.tar.gz
source_unpacked = {package}
build_target = bin/root.exe
install_target = bin/root.exe

[package sqlite]
version = 3.7.17
source_url = http://www.sqlite.org/2013/{package}-autoconf-3071700.tar.gz
source_unpacked = {package}-autoconf-3071700
build_target = sqlite3
install_target = bin/sqlite3

[package tbb]
features = tarball, tbbinst
version = 4.1.3
source_unpacked = tbb41_20130314oss
srcpkg_ext = tgz
source_archive_file = {source_unpacked}_src.{srcpkg_ext}
source_archive_checksum = md5:ed4af7ccfa122f16cf9920b241633a3a
source_url = http://www.phy.bnl.gov/~bviren/lbne/{source_archive_file}
# gotta do in-source build, trick tarball into unpacking in the build area
source_dir = builds
unpacked_target = Makefile
# Non standard location to build - must match source unpacked
build_dir = builds/{source_unpacked}
# the rest is handled by tbbinst feature

[package xerces-c]
version = {xercesc_version}
source_url = http://apache.osuosl.org/xerces/c/3/sources/{source_archive_file}
source_archive_checksum = md5:6a8ec45d83c8cfb1584c5a5345cb51ae
build_target = src/libxerces-c.la
install_target = lib/libxerces-c.la
export_LD_LIBRARY_PATH = prepend:{dest_install_dir}/lib

[package xrootd]
version = {xrootd_version}
features = tarball cmake makemake
depends = prepare:cmake_install
source_url = http://xrootd.slac.stanford.edu/download/v{version}/{source_archive_file}
source_url_checksum = md5:8c2a2d66a684a8f4395c02ae249f5706
source_archive_file = {source_unpacked}.tar.gz
unpacked_target = CMakeLists.txt
build_target = src/xrdcp
install_target = bin/xrdcp
export_XRDSYS = {dest_install_dir}


#######

[package geant]
version = 4.9.6.p01

[package cry]
version = 1.7

[package genie]
version = 2.8.0

[package lhapdf]
version = 5.8.8

[package mysql]
version = 5.5.32

[package postgresql]
version = 9.1.5

[package pythia]
version = 6

[package log4cpp]
version = 1.1



## EOF ##
