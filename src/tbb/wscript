#!/usr/bin/env python
# encoding: utf-8
'''
tbb is cantankerous package to build.
'''


import os
from orch.features import pfi
from orch import features as featmod
from orch import util
from orch.wafutil import exec_command
import waflib.Logs as msg

PACKAGE = {
    'name': 'lcg-builders/tbb',
    'author': ['atlas collaboration'],
}

# we expect the tarball feature to be configured so that the
# source_unpacked is in the build directory as we must do an
# in-source build for tbb.
requirements = dict(
    build_dir = 'builds/{source_unpacked}',
    build_target = 'crappy-build-system',
    install_target = 'lib/libtbb.so',
)

@pfi.feature('tbbbuild', **requirements)
def feature_tbbbuild(info):

    def build_task(task):
        flag = info.build_target.abspath()
        cmd = "(cd src && make cpp0x=1 tbb_release) && touch %s" % flag
        return exec_command(task, cmd)

    info.task('build',
             rule = build_task,
             source = info.unpacked_target,
             target = info.build_target,)


    
    def install_task(task):
        install_lib_dir = os.path.dirname(info.install_target.abspath())
        cmd = 'mkdir -p %s && cp build/*_release/libtbb* %s/' % (install_lib_dir,install_lib_dir)
        return exec_command(task, cmd)

    info.task('install',
             rule = install_task,
             source = info.build_target,
             target = info.install_target)

def pkg_deps(ctx):
    pass

def configure(ctx):
    pass

def build(bld):
    pkgname = 'tbb'
    delayed_deps = list()
    pkgcfg = bld.env.orch_package_dict[pkgname]
    featlist = pkgcfg.get('features').split()
    featcfg = featmod.feature_requirements(featlist)

    feature_funcs, feature_configs = featmod.load()

    for feat in featlist:
        pcfg = util.update_if(featcfg, None, **pkgcfg)
        try:
            feat_func = feature_funcs[feat]
        except KeyError:
            msg.error('No method for feature: "%s", package: "%s"'%(feat,pkgname))
            raise
        msg.debug('orch: feature: "%s" for package: "%s"' % (feat, pkgname))
        dep = feat_func(bld, pcfg)
        delayed_deps.append(dep)
    for dep in delayed_deps:
        dep.register_dependencies()
        
