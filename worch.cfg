# default starting section
[start]
groups = toolchaingcc, buildtools, externals

# default group
group = externals

# tags
tags = {CMTCFG}

# default features of a package build
features = tarball patch autoconf

# Defaults
tags = debug
features = tarball autoconf makemake
download_dir = downloads
source_dir = sources
build_dir = builds/{package}-{version}-{CMTCFG}

srcpkg_ext = tar.gz
source_unpacked = {package}-{version}
source_archive_file = {source_unpacked}.{srcpkg_ext}

# Installation area for the package 
#install_dir = {INSTALL_AREA}/{package}/{version}/{CMTCFG}
#install_dir = {INSTALL_AREA}
install_dir = {INSTALL_AREA}/{CMTCFG}

# Depending on the feature, certain variables must be provided
srcpkg_ext = tar.gz
source_unpacked = {package}-{version}
source_archive_file = {source_unpacked}.{srcpkg_ext}

# collect versions here
cloog_version = 0.18.0
cmake_version = 2.8.8
gcc_version = 4.8.1
gmp_version = 5.0.5
isl_version = 0.11.1
mpc_version = 0.9
mpfr_version = 3.1.2
ppl_version = 0.12.1
root_version = 5.34.10
xrootd_version = 3.3.3

[keytype]
groups = group
packages = package

######## toolchain #######
[group toolchaingcc]
#packages = cmake, gmp, mpfr, mpc, isl, ppl, cloog, gcc
packages = gmp, mpfr, mpc, isl, ppl, cloog, gcc
build_target = bin/{package}
install_target = bin/{package}
build_cmd_options = -j8

# Put everything into gcc's install_dir
#install_dir = {PREFIX}/gcc/{gcc_version}/{tagsdashed}
install_dir = {INSTALL_AREA}/{CMTCFG}

export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib64
export_LIBRARY_PATH = prepend:{install_dir}/lib
export_LIBRARY_PATH = prepend:{install_dir}/lib64
export_PATH = prepend:{install_dir}/bin

# buildenv_COMPILER_PATH = set:{install_dir}/bin
# buildenv_LD_LIBRARY_PATH = prepend:{install_dir}/lib

# buildenv_LIBRARY_PATH = set:/usr/lib/{gcc_multiarch}
# buildenv_C_INCLUDE_PATH = set:/usr/include/{gcc_multiarch}
# buildenv_CPLUS_INCLUDE_PATH = set:/usr/include/{gcc_multiarch}
# buildenv_CPATH = set:/usr/include/{gcc_multiarch}


[package gmp]
version = {gmp_version}
source_url = ftp://ftp.gmplib.org/pub/{source_unpacked}/{source_archive_file}
srcpkg_ext = tar.bz2
prepare_cmd_options = --prefix={install_dir} --enable-cxx
build_target = libgmp.la
install_target = lib/libgmp.la
buildenv_CPPFLAGS = -fexceptions

[package ppl]
version = {ppl_version}
source_url = http://bugseng.com/products/ppl/download/ftp/releases/{version}/{source_archive_file}
srcpkg_ext = tar.bz2
prepare_cmd_options = --prefix={install_dir} --without-java --with-gmp={gmp_install_dir}
depends = prepare:gmp_install
build_target = interfaces/C/libppl_c.la
install_target = lib/libppl_c.la
buildenv_CXXFLAGS = set:-fno-access-control
buildenv_CPPFLAGS = -I{install_dir}/include
buildenv_LDFLAGS=-L{install_dir}/lib

[package mpfr]
version = {mpfr_version}
source_url = http://www.mpfr.org/mpfr-current/{source_archive_file}
srcpkg_ext = tar.bz2
prepare_cmd_options = --prefix={install_dir} --with-gmp={gmp_install_dir}
depends = prepare:gmp_install
build_target = src/libmpfr.la
install_target = lib/libmpfr.la

[package mpc]
version = {mpc_version}
source_url = http://www.multiprecision.org/mpc/download/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --with-gmp={gmp_install_dir} --with-mpfr={mpfr_install_dir}
depends = prepare:gmp_install, prepare:mpfr_install
build_target = src/libmpc.la
install_target = lib/libmpc.la

[package isl]
version = {isl_version}
source_url = ftp://gcc.gnu.org/pub/gcc/infrastructure/{source_archive_file}
srcpkg_ext = tar.bz2
prepare_cmd_options = --prefix={install_dir} --with-gmp-prefix={gmp_install_dir}
depends = prepare:gmp_install
build_target = libisl.la
install_target = lib/libisl.la

[package cloog]
version = {cloog_version}
source_url = ftp://gcc.gnu.org/pub/gcc/infrastructure/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --with-gmp-prefix={gmp_install_dir} --with-ppl={ppl_install_dir} 
depends = prepare:gmp_install, prepare:ppl_install, prepare:isl_install
build_target = cloog
install_target = bin/cloog
buildenv_LD_LIBRARY_PATH = prepend:{install_dir}/lib

[package gcc]
version = {gcc_version}
source_url = http://www.netgull.com/gcc/releases/{source_unpacked}/{source_archive_file}
srcpkg_ext = tar.bz2
prepare_cmd_options = --prefix={install_dir} --libdir={install_dir}/lib --libexecdir={install_dir}/lib --with-gmp={gmp_install_dir} --with-mpc={mpc_install_dir} --with-mpfr={mpfr_install_dir} --with-ppl={ppl_install_dir} --with-cloog={cloog_install_dir} --enable-cloog-backend=isl --with-gnu-as --with-gnu-ld --disable-libgcj --enable-threads=posix --enable-languages=c,c++,objc,fortran,go --disable-multilib
depends = prepare:gmp_install, prepare:mpc_install, prepare:mpfr_install, prepare:ppl_install, prepare:cloog_install
#patch_url = file://{top}/patches/{package}-{version}.patch
patch_cmd_options = -p0 -i
build_cmd_options = bootstrap -j8
build_target = gcc/xgcc
buildenv_CXXFLAGS = set:-fPIC -m64
buildenv_CFLAGS = set:-fPIC -m64
buildenv_LD_LIBRARY_PATH = prepend:{install_dir}/lib
buildenv_LIBRARY_PATH = prepend:{install_dir}/lib
buildenv_PATH = prepend:{install_dir}/bin

######## build-tools #######
[group buildtools]
packages = cmake
build_target = bin/{package}
install_target = bin/{package}
build_cmd_options = -j8
export_CC = {install_dir}/bin/gcc
export_CXX = {install_dir}/bin/g++

[package cmake]
version = {cmake_version}
features = tarball prepare makemake
source_url = http://www.cmake.org/files/v{version_2digit}/{source_archive_file}
source_archive_file = {source_unpacked}.tar.gz
unpacked_target = bootstrap
prepare_cmd = ../../{source_dir}/{source_unpacked}/bootstrap
prepare_cmd_options = --prefix={install_dir}
prepare_target = cmake_install.cmake
build_target = bin/cmake
install_target = bin/cmake

export_PATH = prepend:{install_dir}/bin
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
#export_LD_LIBRARY_PATH = prepend:{install_dir}/lib64
export_LIBRARY_PATH = prepend:{install_dir}/lib
#export_LIBRARY_PATH = prepend:{install_dir}/lib64


### externals ###
[group externals]
#packages = libsigcpp, libxml2, python, sqlite, tbb, root, geant, xerces-c, cry, genie, lhapdf, mysql, postgresql, pythia, log4cpp
#packages = libsigcpp, libxml2, python, sqlite, tbb, xrootd, root, xerces-c, gccxml
packages = libxml2, python, sqlite, xrootd, root

# artificially require any environment variables defined by package or
# groups of packages.
environment = group:buildtools, group:toolchaingcc
#depends = prepare:gcc_install

build_cmd_options = -j8

[package libsigcpp]
version = 2.2.10
source_unpacked = libsigc++-{version}
source_archive_file = {source_unpacked}.tar.bz2
source_url = http://ftp.gnome.org/pub/GNOME/sources/libsigc++/{version_2digit}/{source_archive_file}
build_target = sigc++/signal.lo
install_target = lib/pkgconfig


[package libxml2]
depends = prepare:python_install
version = 2.8.0
source_url = ftp://xmlsoft.org/{package}/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --with-threads --with-history --with-python={install_dir}/bin/python
build_target = libxml2.la
install_target = lib/libxml2.a

[package python]
depends = prepare:sqlite_install
version = 2.7.3
source_unpacked = Python-{version}
source_archive_file = {source_unpacked}.tgz
source_url = http://www.python.org/ftp/{package}/{version}/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --enable-shared --with-threads --enable-unicode=ucs4
build_target = python
install_target = bin/python

[package sqlite]
version = 3.7.17
source_url = http://www.sqlite.org/2013/{package}-autoconf-3071700.tar.gz
source_unpacked = {package}-autoconf-3071700
build_target = sqlite3
install_target = bin/sqlite3

[package tbb]
version = 41_20130314oss

[package xrootd]
version = {xrootd_version}
features = tarball cmake makemake
depends = prepare:cmake_install
source_url = http://xrootd.slac.stanford.edu/download/v{version}/{source_archive_file}
source_url_checksum = md5:8c2a2d66a684a8f4395c02ae249f5706
source_archive_file = {source_unpacked}.tar.gz
build_target = src/xrdcp
install_target = bin/xrdcp
export_XRDSYS = {install_dir}


[package root]
version = {root_version}
depends = prepare:xrootd_install, prepare:python_install
source_url = ftp://root.cern.ch/{package}/{source_archive_file}
source_archive_file = {package}_v{version}.source.tar.gz
source_unpacked = {package}
build_target = bin/root.exe
install_target = bin/root.exe

[package geant]
version = 4.9.6.p01

[package xerces-c]
version = 3.1.1

[package cry]
version = 1.7

[package genie]
version = 2.8.0

[package lhapdf]
version = 5.8.8

[package mysql]
version = 5.5.32

[package postgresql]
version = 9.1.5

[package pythia]
version = 6

[package log4cpp]
version = 1.1

# [package gccxmlaa]
# version = 20130222a
# source_url = http://cern.ch/mana-fwk/downloads/ext/{package}-{version}.tar.gz
# build_target = gccxml
# install_target = bin/gccxml


