######## toolchain #######
[group toolchaingcc]

packages = gmp, mpfr, mpc, isl, ppl, cloog, gcc
features = tarball, autoconf, makemake
build_target = bin/{package}
install_target = bin/{package}
build_cmd_options = -j{NCPUS}

# Want to put all GCC packages into one install_dir
install_dir = {LCG_external}/gcc/{gcc_version}/{HWAF_VARIANT}

export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib64
export_LIBRARY_PATH = prepend:{install_dir}/lib
export_LIBRARY_PATH = prepend:{install_dir}/lib64
export_PATH = prepend:{install_dir}/bin

# buildenv_COMPILER_PATH = set:{install_dir}/bin
# buildenv_LD_LIBRARY_PATH = prepend:{install_dir}/lib

# buildenv_LIBRARY_PATH = set:/usr/lib/{gcc_multiarch}
# buildenv_C_INCLUDE_PATH = set:/usr/include/{gcc_multiarch}
# buildenv_CPLUS_INCLUDE_PATH = set:/usr/include/{gcc_multiarch}
# buildenv_CPATH = set:/usr/include/{gcc_multiarch}


[package gmp]
version = {gmp_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
srcpkg_ext = tar.bz2
prepare_cmd_options = --prefix={install_dir} --enable-cxx
build_target = libgmp.la
install_target = lib/libgmp.la
buildenv_CPPFLAGS = -fexceptions

[package ppl]
version = {ppl_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
srcpkg_ext = tar.bz2
prepare_cmd_options = --prefix={install_dir} --without-java --with-gmp={gmp_install_dir}
depends = prepare:gmp_install
build_target = interfaces/C/libppl_c.la
install_target = lib/libppl_c.la
buildenv_CXXFLAGS = set:-fno-access-control
buildenv_CPPFLAGS = -I{install_dir}/include
buildenv_LDFLAGS=-L{install_dir}/lib

[package mpfr]
version = {mpfr_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
srcpkg_ext = tar.bz2
prepare_cmd_options = --prefix={install_dir} --with-gmp={gmp_install_dir}
depends = prepare:gmp_install
build_target = src/libmpfr.la
install_target = lib/libmpfr.la

[package mpc]
version = {mpc_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --with-gmp={gmp_install_dir} --with-mpfr={mpfr_install_dir}
depends = prepare:gmp_install, prepare:mpfr_install
build_target = src/libmpc.la
install_target = lib/libmpc.la

[package isl]
version = {isl_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
srcpkg_ext = tar.bz2
prepare_cmd_options = --prefix={install_dir} --with-gmp-prefix={gmp_install_dir}
depends = prepare:gmp_install
build_target = libisl.la
install_target = lib/libisl.la

[package cloog]
version = {cloog_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --with-gmp-prefix={gmp_install_dir} --with-ppl={ppl_install_dir} 
depends = prepare:gmp_install, prepare:ppl_install, prepare:isl_install
build_target = cloog
install_target = bin/cloog
buildenv_LD_LIBRARY_PATH = prepend:{install_dir}/lib

[package gcc]
version = {gcc_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
srcpkg_ext = tar.bz2
prepare_cmd_options = --prefix={install_dir} --libdir={install_dir}/lib --libexecdir={install_dir}/lib --with-gmp={gmp_install_dir} --with-mpc={mpc_install_dir} --with-mpfr={mpfr_install_dir} --with-ppl={ppl_install_dir} --with-cloog={cloog_install_dir} --enable-cloog-backend=isl --with-gnu-as --with-gnu-ld --disable-libgcj --enable-threads=posix --enable-languages=c,c++,objc,fortran,go --disable-multilib
depends = prepare:gmp_install, prepare:mpc_install, prepare:mpfr_install, prepare:ppl_install, prepare:cloog_install
build_cmd_options = bootstrap -j{NCPUS}
build_target = gcc/xgcc
buildenv_CXXFLAGS = set:-fPIC
buildenv_CFLAGS = set:-fPIC
buildenv_LD_LIBRARY_PATH = prepend:{install_dir}/lib
buildenv_LIBRARY_PATH = prepend:{install_dir}/lib
buildenv_PATH = prepend:{install_dir}/bin

export_PATH = prepend:{install_dir}/bin
# allow both lib/libgmp.so and lib64/libstc++.so to be picked up
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib:{install_dir}/lib64

export_CC = {install_dir}/bin/gcc
export_CXX = {install_dir}/bin/g++

## EOF ##
