### lcg-externals ###
[group lcg-externals]
packages = AIDA, boost, clhep, cppunit, expat, HepMC, HepPDT, gccxml, gdb, gsl, libxml2, python, qmtest, setuptools, sqlite, tbb, xerces-c, xrootd

# artificially require any environment variables defined by package or
# groups of packages.
environment = group:lcg-base
depends = prepare:lcg-base

build_cmd_options = -j{NCPUS}

[package AIDA]
version = {AIDA_version}
features = tarball, prepare, makemake, modulesfile
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
source_archive_checksum = md5:c14498913913d02250f3f31cf36a3762
unpacked_target = README-AIDA
prepare_cmd = cp -ar ../../{source_dir}/{source_unpacked}/* .
prepare_target = share/src/cpp/AIDA/AIDA.h
build_cmd = /bin/true
install_cmd = /bin/cp -ar share {install_dir}/.
install_cmd_std_opts =
install_target = share/src/cpp/AIDA/AIDA.h

[package boost]
version = {boost_version}
features = tarball, prepare, makemake, modulesfile
depends = prepare:python_install
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
unpacked_target = bootstrap.sh
prepare_cmd = cp -a ../../{source_dir}/{source_unpacked}/* .
prepare_cmd_std_opts = 
prepare_target = bootstrap.sh
build_cmd = ./bootstrap.sh
build_cmd_options = --prefix={install_dir} --without-icu --without-libraries=mpi --with-python={python_install_dir}/bin/python --with-python-root={python_install_dir}
build_target = b2
install_cmd = ./b2 
install_cmd_options = install cxxflags="-std=c++11 -Wno-deprecated-declarations -fvisibility-inlines-hidden" variant=release
install_target = include/boost/any.hpp

# for compat with LCG layout
install_dir = {LCG_external}/Boost/{version}/{HWAF_VARIANT}

[package clhep]
version = {clhep_version}
features = tarball, cmake, makemake, modulesfile
depends = prepare:cmake_install
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
prepare_cmd_options = -DCLHEP_BUILD_DOCS=OFF
unpacked_target = README
build_target = CLHEP
install_target = bin/clhep-config

[package cppunit]
version = {cppunit_version}
features = tarball, patch, autoconf, makemake, modulesfile
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
patch_url = file://{top}/patchfiles/{package}-{version}.patch
patch_cmd_options = -p0
build_target = cppunit-config
install_target = bin/cppunit-config

install_cmd = make install && cp {top}/patchfiles/CppUnit_testdriver.cpp {install_dir}/include/.
install_cmd_options = 
install_cmd_std_opts = 

# for compat with LCG layout
install_dir = {LCG_external}/CppUnit/{version}/{HWAF_VARIANT}

[package expat]
version = {expat_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
build_target = libexpat.la
install_target = lib/libexpat.{soext}

export_PATH = prepend:{install_dir}/bin
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib

[package gccxml]
version = {gccxml_version}
features = tarball, cmake, makemake, modulesfile
depends = prepare:cmake_install
source_url = http://cern.ch/mana-fwk/downloads/ext/gccxml-{version}.tar.gz
unpacked_target = CMakeLists.txt
build_target = bin/gccxml
install_target = bin/gccxml

export_PATH = prepend:{install_dir}/bin

[package gdb]
depends = prepare:python_install
version = {gdb_version}
source_url = http://ftp.gnu.org/gnu/gdb/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --libdir={install_dir}/lib --enable-werror=no --enable-build-warnings=no --enable-ld=yes --with-python={python_install_dir}
build_target = gdb
install_target = bin/gdb

buildenv_LDFLAGS = -L{python_install_dir}/lib

export_PATH = prepend:{install_dir}/bin
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib

[package gsl]
version = {gsl_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --with-pic
build_target = gsl-config
install_target = bin/gsl-config
buildenv_CFLAGS = -O2

# for compat with LCG layout
install_dir = {LCG_external}/GSL/{version}/{HWAF_VARIANT}

export_PATH = prepend:{install_dir}/bin
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib

[package HepMC]
version = {HepMC_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
# trick tarball to unpack into build-dir
source_dir = builds
build_dir = {source_dir}/{source_unpacked}
prepare_cmd = {source_unpacked_path}/bootstrap && {out}/{source_unpacked_path}/configure
#prepare_cmd = /bin/true && ( cd {out}/{source_unpacked_path} && ./bootstrap ) && {out}/{source_unpacked_path}/configure
prepare_cmd_options = --prefix={install_dir} --with-momentum=MEV --with-length=MM
unpacked_target = bootstrap
prepare_target = config.status
build_target = src/libHepMC.la
install_target = lib/libHepMC.la

export_PATH = prepend:{install_dir}/bin
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib

[package HepPDT]
version = {HepPDT_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --with-momentum=MEV --with-length=MM
build_target = src/HepPDT/libHepPDT.{soext}
install_target = lib/libHepPDT.{soext}

export_PATH = prepend:{install_dir}/bin
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib

[package libxml2]
depends = prepare:python_install
version = {libxml2_version}
source_url = ftp://xmlsoft.org/{package}/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --with-threads --with-history --with-python={python_install_dir}/bin/python
build_target = libxml2.la
install_target = lib/libxml2.a

[package python]
depends = prepare:sqlite_install
version = {python_version}
source_unpacked = Python-{version}
source_archive_file = {source_unpacked}.tgz
source_url = http://www.python.org/ftp/{package}/{version}/{source_archive_file}
prepare_cmd_options = --prefix={install_dir} --enable-shared --with-threads --enable-unicode=ucs4
build_target = python
install_target = bin/python
# for compat with LCG layout
install_dir = {LCG_external}/Python/{version}/{HWAF_VARIANT}

export_PATH = prepend:{install_dir}/bin
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib
export_PYTHON = {install_dir}/bin/python

[package qmtest]
depends = prepare:python_install
features = tarball, patch, pypackage, modulesfile
version = {qmtest_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
patch_url = file://{top}/patchfiles/{package}-{version}.patch
patch_cmd_options = -p0
unpacked_target = setup.py
build_target = scripts/qmtest
build_cmd = {python_install_dir}/bin/python setup.py build
build_cmd_options = 
install_target = bin/qmtest
install_target_path = {install_dir}/{install_target}
install_cmd = {python_install_dir}/bin/python setup.py install
install_cmd_options = --prefix={install_dir}
# for compat with LCG layout
install_dir = {LCG_external}/QMtest/{version}/{HWAF_VARIANT}

export_PATH = prepend:{install_dir}/bin
export_PYTHONPATH = prepend:{install_dir}/lib/python{python_version2digit}/site-packages

[package setuptools]
depends = prepare:python_install
features = tarball, pypackage
version = {setuptools_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
unpacked_target = setup.py
build_target = build/lib/easy_install.py
build_cmd = {python_install_dir}/bin/python setup.py build
build_cmd_options = 
install_target = bin/easy_install
install_target_path = {install_dir}/{install_target}
install_cmd = {python_install_dir}/bin/python setup.py install
install_cmd_options = --prefix={install_dir}
# install inside python
install_dir = {LCG_external}/Python/{python_version}/{HWAF_VARIANT}

# for setuptools install checks
buildenv_PYTHONPATH = prepend:{install_dir}/lib/python{python_version2digit}/site-packages

[package sqlite]
version = {sqlite_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
source_unpacked = {package}-autoconf-{sqlite_version}
source_archive_file = {source_unpacked}.tar.gz
build_target = sqlite3
install_target = bin/sqlite3

export_PATH = prepend:{install_dir}/bin
export_LD_LIBRARY_PATH = prepend:{install_dir}/lib


[package tbb]
features = tarball, patch, prepare, makemake, modulesfile
version = {tbb_version}
source_unpacked = tbb41_20130314oss
source_archive_file = {source_unpacked}_src.tgz
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
patch_url = file://{top}/patchfiles/{package}.patch
patch_cmd_options = -p0
unpacked_target = README
prepare_cmd = cp -ar ../../{source_dir}/{source_unpacked}/* .
prepare_cmd_std_opts = 
prepare_target = Makefile
build_cmd = make tbb tbbmalloc tbbproxy
install_cmd = make install PREFIX={install_dir}
buildenv_cfg = release
buildenv_arch = x86_64

export_LD_LIBRARY_PATH = prepend:{install_dir}/lib

[package xerces-c]
version = {xercesc_version}
source_url = http://cern.ch/mana-fwk/downloads/ext/{source_archive_file}
build_target = src/libxerces-c.la
install_target = lib/libxerces-c.la
# for compat with LCG layout
install_dir = {LCG_external}/XercesC/{version}/{HWAF_VARIANT}
export_LD_LIBRARY_PATH = prepend:{dest_install_dir}/lib

[package xrootd]
version = {xrootd_version}
features = tarball, cmake, makemake, modulesfile
depends = prepare:cmake_install
source_url = http://xrootd.slac.stanford.edu/download/v{version}/{source_archive_file}
source_archive_file = {source_unpacked}.tar.gz
unpacked_target = CMakeLists.txt
build_target = src/xrdcp
install_target = bin/xrdcp
export_XRDSYS = {dest_install_dir}


#######


## EOF ##
